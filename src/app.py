# app.py
import sys
from pathlib import Path

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image

from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# =========================================
#           R√©pertoires du projet
# =========================================
# app.py est dans src/, on remonte √† la racine du repo
ROOT   = Path(__file__).resolve().parent.parent
DATA   = ROOT / "data" / "raw" / "Cleaned_data" / "InUSE"
ASSETS = ROOT / "data" / "data_streamlit"

def safe_image(name: str, **kwargs):
    """Affiche l'image si elle existe; sinon un warning propre."""
    path = ASSETS / name
    if path.exists():
        st.image(str(path), **kwargs)
    else:
        st.warning(f"‚ö†Ô∏è Image manquante : {name} (attendue dans {ASSETS})")

# =========================================
#            Configuration page
# =========================================
st.set_page_config(
    page_title="London Fire Response - Analyse & Pr√©visions",
    page_icon="üöí",
    layout="wide",
)

# =========================================
#           Chargement des donn√©es
# =========================================
@st.cache_data
def charger_donnees():
    incidents_path = DATA / "cleaned_data_incidents.csv"
    mobilis_path   = DATA / "cleaned_data_mobilisations.csv"

    if not incidents_path.exists():
        st.error(f"Fichier introuvable : {incidents_path}")
        st.stop()
    if not mobilis_path.exists():
        st.error(f"Fichier introuvable : {mobilis_path}")
        st.stop()

    df    = pd.read_csv(incidents_path, low_memory=False, parse_dates=["DateOfCall"])
    # Ajuste parse_dates si une colonne date existe c√¥t√© mobilisations
    df_mb = pd.read_csv(mobilis_path, low_memory=False)

    return df, df_mb

df, df_mb = charger_donnees()


# =========================================
#           Sidebar / Navigation
# =========================================
st.sidebar.title("Bienvenue dans l'application ü§ó")

# Image sidebar (place "BrigadeLondres.jpeg" dans data/data_streamlit)
sidebar_img = "BrigadeLondres.jpeg"
if (ASSETS / sidebar_img).exists():
    st.sidebar.image(str(ASSETS / sidebar_img), caption="London Fire Brigade", use_container_width=True)
else:
    st.sidebar.warning(f"‚ö†Ô∏è Image '{sidebar_img}' introuvable ‚Äì place-la dans {ASSETS}.")

menu = st.sidebar.radio(
    "Sections",
    [
        "1. Pr√©sentation du projet",
        "2. Donn√©es & Pr√©traitement",
        "3. Exploration des donn√©es",
        "4. Mod√©lisation des s√©ries temporelles",
        "5. Pr√©dictions futures",
        "6. Comparaison des mod√®les",
        "7. Conclusion & Perspectives",
    ],
)

# =========================================
# 1. Pr√©sentation
# =========================================
if menu == "1. Pr√©sentation du projet":
    st.title("üöí London Fire Response ‚Äì Pr√©diction du nombre d'interventions futures")

    st.markdown("""
**Bienvenue dans l‚Äôunivers de l‚Äôanalyse pr√©dictive des interventions de la London Fire Brigade !**

**üë©‚Äçüöí Depuis 1865, la London Fire Brigade prot√®ge 9 millions de Londoniens gr√¢ce √† plus de 100 casernes : des pompiers aguerris, dop√©s aux datas (et au th√© anglais) qui surgissent avant m√™me que le toast ne br√ªle.**

### üéØ Objectif strat√©gique
Nos mod√®les estiment chaque jour le **nombre d‚Äôinterventions** √† venir pour :
- **R√©duire les d√©lais d‚Äôintervention** en pr√©positionnant les √©quipes o√π le volume sera le plus √©lev√©.
- **Optimiser les co√ªts** en ajustant le nombre de camions et de personnels selon la charge pr√©vue.
- **Renforcer la r√©silience** en d√©tectant les anomalies (pics impr√©vus) et en adaptant la r√©ponse.

### üìã Contexte m√©tier
Chaque jour, des milliers d‚Äôincidents sont g√©r√©s : feux, fausses alertes, secours m√©dicaux‚Ä¶
La variance saisonni√®re (pics d‚Äô√©t√©, vagues de froid), √©v√©nementielle (grands √©v√©nements, crises) et g√©ographique (arrondissements) complique la planification.

**Notre application Streamlit** permet de :
- Visualiser l‚Äô**historique des volumes** d‚Äôinterventions.
- Comprendre les **patterns** via STL, SARIMA et Prophet.
- Afficher les **pr√©visions** de nombre quotidien d‚Äôappels, avec intervalles de confiance.

### üîç Valeur ajout√©e technique
- **Pipeline de donn√©es** : ingestion, nettoyage.
- **Exploration interactive** : courbes dynamiques, filtres multi-dimensionnels.
- **Pr√©diction** :
  - **STL** pour isoler tendance et saisonnalit√©.
  - **SARIMA** pour capter la saisonnalit√© mensuelle.
  - **Prophet** pour int√©grer effets calendaires et anomalies.

### üöÄ Perspectives m√©tier
- **Tableau de bord** des volumes attendus par incident ‚Äî extensible aux quartiers, arrondissements‚Ä¶
- **Alertes** automatiques si la demande exc√®de les seuils critiques.
- **Optimisation des tourn√©es** gr√¢ce aux pr√©visions coupl√©es √† la g√©olocalisation.

> ¬´ Nos mod√®les ne pr√©voient pas juste une tendance, ils comptent chaque intervention √† venir ! ¬ª
""")

# =========================================
# 2. Donn√©es & Pr√©traitement
# =========================================
elif menu == "2. Donn√©es & Pr√©traitement":
    st.title("üìä Jeux de donn√©es")

    dataset_option = st.radio("S√©lectionne un dataset :", ("Dataset Principal", "Dataset Secondaire"))

    if dataset_option == "Dataset Principal":
        st.header("DATASET PRINCIPAL")

        st.subheader("1. Source")
        st.markdown("""
Le jeu de donn√©es principal provient du [London Fire Brigade Incident Records](https://data.london.gov.uk/dataset/london-fire-brigade-incident-records),
mis √† disposition par le **Greater London Authority**.
""")

        st.subheader("2. P√©riode")
        st.markdown("""Incidents couvrant la p√©riode **1·µâ ≥ janvier 2009 ‚Üí 31 mars 2025**.""")

        st.subheader("3. Remarques")
        st.markdown("""
- Granularit√© **incident** ; n√©cessite nettoyage/harmonisation
- Colonnes redondantes ou vides √† filtrer.
- Localisations enrichissables avec des jeux externes.
""")

        st.subheader("4. Extrait du DataFrame")
        st.dataframe(df.head(10))

        st.subheader("5. Statistiques descriptives")
        st.dataframe(df.describe(include="all").transpose())

    else:
        st.header("DATASET SECONDAIRE")

        st.subheader("1. Source")
        st.markdown("""Donn√©es de **mobilisation** issues du m√™me portail officiel, disponibles en annexe.""")

        st.subheader("2. P√©riode")
        st.markdown("""Couverture **2009 ‚Üí 2025**, align√©e sur le dataset incidents.""")

        st.subheader("3. Remarques")
        st.markdown("""
- Nombreuses valeurs manquantes sur les colonnes temps.
- Fichiers Excel converti en **CSV**.
- Jointure via la cl√© **`IncidentNumber`** harmonis√©e et format√©e.
-La jointure a √©t√© analys√©e mais pas utilis√©e pour la mod√©lisation car:
1-donn√©es incompletes
2-temps de traitement et volum√©trie trop important pour l'usage
""")

        st.subheader("4. Extrait du DataFrame")
        st.dataframe(df_mb.head(10))

        st.subheader("5. Statistiques descriptives")
        st.dataframe(df_mb.describe(include="all").transpose())

# =========================================
# 3. Exploration des donn√©es
# =========================================

elif menu == "3. Exploration des donn√©es":
    st.title("üîç Analyse exploratoire des donn√©es")

    choix_exploration = st.radio(
        "S√©lectionner le type de donn√©es √† explorer :",
        ("Incidents", "Mobilisations")
    )

    # -------------------- Incidents --------------------
    if choix_exploration == "Incidents":
        st.markdown("""
        Cette section explore **les incidents** : 
        - leur √©volution dans le temps,  
        - leur typologie (nature),  
        - leur r√©partition g√©ographique,  
        - et les d√©lais d‚Äôintervention.

        **Objectif :** identifier les tendances, anomalies et zones √† forte activit√©.
        """)

        col1, col2, col3 = st.columns(3)
        col1.metric("Total incidents", f"{df.shape[0]:,}")
        col2.metric("Cat√©gories d'incident", f"{df['IncidentGroup'].nunique()}")
        col3.metric("Arrondissements touch√©s", f"{df['IncGeo_BoroughName'].nunique()}")

        tab_vol, tab_types, tab_geo, tab_delais = st.tabs(
            ["üìà Volume annuel", "üåÄ Typologie", "üìç G√©ographie", "‚è±Ô∏è D√©lais"]
        )

        with tab_vol:
            st.subheader("Nombre d‚Äôincidents par an")
            safe_image("nombresincidents.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - **2009-2014** : baisse (-28 %) attribuable aux campagnes de pr√©vention.
            - **2015-2023** : tendance stable avec des fluctuations saisonni√®res.
            - **Pic 2024** (> 134k) : probablement li√© aux vagues de chaleur.
            - **2025** : donn√©es partielles (janvier √† mars seulement).
            """)

        with tab_types:
            st.subheader("R√©partition par type d‚Äôincident")
            safe_image("repartition.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Les **False Alarm** repr√©sentent une part importante, impactant la charge op√©rationnelle.
            - Les incidents **Fire** et **Special Service** sont plus variables et sensibles aux saisons.
            """)

            st.markdown("**√âvolution des ‚ÄòFalse Alarm‚Äô**")
            safe_image("evolutionfalsealarm.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Progression nette depuis 2018, pouvant refl√©ter un changement de protocole ou une hausse de signalements.
            """)

        with tab_geo:
            st.subheader("Top 15 arrondissements")
            safe_image("borough_top15.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Forte concentration dans quelques boroughs (forte densit√© + zones √† risque).
            - Ces zones pourraient √™tre prioritaires pour un pr√©positionnement strat√©gique.
            """)

        with tab_delais:
            st.subheader("Distribution des d√©lais d‚Äôarriv√©e (1er camion)")
            safe_image("delais_hist.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - La majorit√© des interventions sont r√©alis√©es en moins de **6 minutes**.
            - Quelques valeurs extr√™mes indiquent des retards exceptionnels (embouteillages, conditions m√©t√©o, incidents majeurs).
            """)

            st.subheader("D√©lai moyen par type d‚Äôincident")
            safe_image("delai_type.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Les d√©lais sont plus courts pour les **incendies** (priorit√© absolue).
            - Plus longs pour **Special Service** ou **False Alarm**.
            """)

    # ------------------ Mobilisations ------------------
    else:
        st.markdown("""
        Cette section se concentre sur les **mobilisations** :  
        volumes annuels, r√©partition horaire, d√©lais d‚Äôintervention, et performance des casernes.
        
        **Objectif :** comprendre le rythme op√©rationnel et identifier les points de saturation.
        """)

        if df_mb.empty:
            st.error("Dataset mobilisations indisponible.")
            st.stop()

        col1, col2 = st.columns(2)
        col1.metric("Total mobilisations", f"{df_mb.shape[0]:,}")
        col2.metric("Nombre de casernes", f"{df_mb['StationName'].nunique()}")

        tab_vol_m, tab_heure, tab_delais_m, tab_caserne, tab_clean = st.tabs(
            ["üìà Volume annuel", "‚è∞ Heure d‚Äôappel", "üöí D√©lais", "üèÜ Casernes", "üîÑ Avant/Apr√®s nettoyage"]
        )

        with tab_vol_m:
            st.subheader("Nombre de mobilisations par an")
            safe_image("mobilisationan.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Variation similaire aux incidents, avec des hausses pendant les pics saisonniers.
            """)

        with tab_heure:
            st.subheader("Mobilisations par heure d‚Äôappel")
            safe_image("mobilisationheure.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Deux pics majeurs : **matin√©e (8-10h)** et **fin d‚Äôapr√®s-midi (17-20h)**.
            - Creux prononc√© la nuit.
            """)

        with tab_delais_m:
            st.subheader("Distribution des temps d‚Äôintervention")
            safe_image("intervention.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - La distribution est concentr√©e sous les **10 minutes**.
            - Les outliers m√©ritent une analyse (distance, trafic, √©v√©nements exceptionnels).
            """)

        with tab_caserne:
            st.subheader("Top 15 casernes les plus mobilis√©es")
            safe_image("mobilisationcaserne.png", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Quelques casernes concentrent une forte proportion des d√©parts.
            - Ce d√©s√©quilibre peut indiquer un besoin de r√©√©quilibrage des ressources.
            """)

        with tab_clean:
            st.subheader("Comparaison avant / apr√®s nettoyage")
            safe_image("avantapres.jpeg", use_container_width=True)
            st.markdown("""
            **Observation :**
            - Nettoyage efficace : r√©duction des doublons et harmonisation des formats.
            - Impact direct sur la qualit√© des analyses suivantes.
            """)


# =========================================
# 4. Mod√©lisation des s√©ries temporelles
# =========================================

elif menu == "4. Mod√©lisation des s√©ries temporelles":
    st.title("üìà Mod√©lisation des s√©ries temporelles")

    # Choix des mod√®les (avant d√©composition)
    st.subheader("Pourquoi SARIMA & Prophet ?")
    st.markdown("""
- **SARIMA** : adapt√© aux s√©ries agr√©g√©es **mensuelles**, capture une **tendance** (*d=1*) et une **saisonnalit√© annuelle** (*D=1, m=12*) avec une structure parcimonieuse.
- **Prophet** : efficace au **journalier**, g√®re **tendance**, **saisonnalit√©s multiples** (hebdo/annuelle) et **effets calendaires** ; robuste aux **outliers**.
""")
      # Indexation temporelle (concat√©nation date + heure -> datetime)
    st.subheader("üß± Indexation temporelle")
    st.markdown("Apres l'EDA des colonnes pertinentes, nous avons cr√©ons un index `datetime` en concat√©nant la date et l'heure de l'appel qui d√©clenche une interventions, afin d'assurer un **horodatage pr√©cis** pour les mod√®les.")

    # ---------------------------
    # Helpers pour ADF & s√©ries
    # ---------------------------
    def adf_test(series_np):
        """ADF avec param√®tres explicites pour des r√©sultats stables."""
        stat, pval, *_ = adfuller(
            series_np, autolag="AIC", regression="c", maxlag=None
        )
        return stat, pval

    def build_inc_daily(df_):
        """S√©rie journali√®re : comptage d'incidents par jour, index continu."""
        s = (
            df_["DateOfCall"].dt.floor("D")   # jour
              .value_counts()
              .sort_index()
        )
        full_days = pd.date_range(s.index.min(), s.index.max(), freq="D")
        s = s.reindex(full_days, fill_value=0).astype("float64")
        s.index.name = "ds"
        return s

    def build_inc_monthly(df_):
        """S√©rie mensuelle : comptage d'incidents par mois, index continu."""
        s = (
            df_["DateOfCall"].dt.to_period("M")
              .value_counts()
              .sort_index()
        )
        full_months = pd.period_range(s.index.min(), s.index.max(), freq="M")
        s = s.reindex(full_months, fill_value=0)
        s.index = s.index.to_timestamp()  # DatetimeIndex
        s = s.astype("float64")
        s.index.name = "ds"
        return s

    # ---------------------------
    # S√©lecteur de granularit√© align√© avec ton notebook
    # ---------------------------
    st.subheader("üìå Test de stationnarit√© (ADF) + ACF/PACF")
    gran = st.radio(
        "Granularit√© analys√©e :", 
        ["Journalier (inc_daily)", "Mensuel (inc_monthly)"], 
        horizontal=True,
        help="Choisis la m√™me granularit√© que dans le notebook pour obtenir le m√™me ADF."
    )

    if gran.startswith("Journalier"):
        serie = build_inc_daily(df)
    else:
        serie = build_inc_monthly(df)

    # ADF align√© notebook
    adf_stat, adf_pvalue = adf_test(serie.values)
    st.markdown(f"**ADF Statistic** : {adf_stat:.4f}")
    st.markdown(f"**p-value** : {adf_pvalue:.4f}")
    if adf_pvalue < 0.05:
        st.success("‚úÖ Stationnaire (p-value < 0.05) ‚Äî une diff√©renciation suppl√©mentaire n'est pas requise.")
    else:
        st.info("‚ÑπÔ∏è Non-stationnaire (p-value ‚â• 0.05) ‚Äî pr√©voir **d=1** et **D=1 (m=12)** si mensuel.")

    # ACF / PACF (sur la s√©rie choisie)
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    plot_acf(serie, lags=50, ax=axs[0])
    plot_pacf(serie, lags=50, ax=axs[1])
    st.pyplot(fig)

    # ---------------------------
    # D√©composition (visuel)
    # ---------------------------
    st.subheader("üìä D√©compositions : Additive vs Multiplicative vs STL")
    safe_image(
        "compraisonstladf.png",
        caption="decomposition_all.jpg : Additive, Multiplicative, STL (2009‚Äì2025)",
        use_container_width=True,
    )

    st.markdown("""

### üß† Analyse comparative
**Additive**
- Amplitude saisonni√®re **quasi constante**.
- Lecture claire mais **r√©sidus plus larges** sur √©v√©nements extr√™mes.

**Multiplicative**
- Amplitude saisonni√®re **proportionnelle** au niveau (pics accentu√©s en p√©riode haute).
- Interpr√©tation moins directe ; d√©pend du niveau g√©n√©ral.

**STL (Seasonal-Trend-Loess)**
- **Flexible** : la saisonnalit√© **varie** dans le temps (covid, canicules).
- **Tendance liss√©e** et **r√©sidus mieux centr√©s** ‚Üí d√©tection d‚Äôoutliers facilit√©e.
- **Robuste** aux chocs et aux changements structurels.
""")

    st.markdown("""
### üîé Interpr√©tation des anomalies
Les pics majeurs correspondent √† :
- üìå √âmeutes 2011
- üìå Grenfell Tower 2017
- üìå Attentats de Londres 2017
- üìå Canicule 2022
- üìå COVID-19 (2020)

Ces chocs **√©chappent** √† la saisonnalit√© r√©guli√®re et justifient une d√©composition **STL** pour mieux isoler tendance/saison/r√©sidu.


**üëâ Choix retenu pour l‚Äôanalyse : STL**, car **robuste** et **adaptatif** sur une longue s√©rie urbaine.
""")



# =========================================
# 5. Pr√©dictions futures
# =========================================
elif menu == "5. Pr√©dictions futures":
    st.title("üîÆ Pr√©visions futures (Avril 2025 - D√©cembre 2028)")

    st.markdown("""
Nous confrontons **SARIMA mensuel** et **Prophet journalier (agr√©g√© en mensuel)** :
- Une **mod√©lisation globale** tous incidents confondus.
- Une mod√©lisation **par groupe** (*Fire*, *False Alarm*, *Special Service*).
""")

    # Prophet journalier ‚Äì jour par jour
    st.subheader("üóìÔ∏è Pr√©visions journali√®res Prophet (jour par jour)")
    safe_image(
        "prophetjourparjour.png",
        caption="prophet_daily_overall.jpg : Pr√©vision incidents journaliers 2025‚Äì2028 avec intervalle",
        use_container_width=True,
    )
    st.markdown("""
    **Observation :**  
    - **Sur le graphe global (2009‚Äì2028)** :  
     On distingue surtout la **tendance globale** et la **saisonnalit√© annuelle** (pics d‚Äô√©t√©, creux hivernaux).  
    Le rythme hebdomadaire n‚Äôest pas lisible √† cette √©chelle, car l‚Äôaxe du temps est trop compress√©.
    """)

    st.markdown("üîç **Zoom sur les pr√©visions journali√®res pour les 6 prochains mois :**")
    safe_image(
        "zoomprophet.png",
        caption="prophet_daily_zoom.jpg : Zoom quotidien du 01/08/2025 au 01/01/2026",
        use_container_width=True,
    )
    st.markdown("""
    **Observation :**  
    -  Le **rythme hebdomadaire** appara√Æt clairement : baisse des interventions le week-end, hausse en semaine.  
    La saisonnalit√© annuelle reste perceptible m√™me au jour le jour.  
    L‚Äô**incertitude** s‚Äô√©largit logiquement √† mesure que l‚Äôon s‚Äô√©loigne dans le temps, √©largissant les intervalles de confiance.
    """)

    # Pr√©visions mensuelles par groupe
    st.subheader("üìà Pr√©visions mensuelles par groupe (Avr25‚ÄìD√©c28)")
    safe_image(
        "sarimamensuelle.png",
        caption="monthly_by_group.jpg : SARIMAX vs Prophet pour Special Service, Fire, False Alarm",
        use_container_width=True,
    )
    st.markdown("""
    **√âvaluation :**
    - *Special Service* : MAE 697.07 ¬∑ RMSE 772.76 ‚Üí tendance haussi√®re r√©cente, pr√©visions proches entre mod√®les.  
    - *Fire* : MAE 333.30 ¬∑ RMSE 336.14 ‚Üí pics saisonniers bien capt√©s par les deux approches.  
    - *False Alarm* : MAE 906.34 ¬∑ RMSE 936.37 ‚Üí forte variabilit√©, plus difficile √† pr√©dire.
    """)

    # Comparaison agr√©g√©e
    st.subheader("üìä Comparaison agr√©g√©e mensuelle")
    safe_image(
        "comparaisonagreee.png",
        caption="compare_monthly.jpg : SARIMAX vs Prophet agr√©g√© mensuel (2025‚Äì2028)",
        use_container_width=True,
    )
    st.markdown("""
    **√âvaluation :**
    - MAE : 83.11 | RMSE : 103.67 | MAPE : 1.40%  
    - Les pr√©visions mensuelles des deux mod√®les sont **tr√®s proches**, √©cart moyen de ~1,4% seulement.
    """)

    # Erreurs absolues & cumul√©es
    st.subheader("üìâ Erreurs absolues & cumul√©es")
    safe_image(
        "erreurabsoluemensuelle.png",
        caption="error_absolute.jpg : Erreur absolue mensuelle entre mod√®les",
        use_container_width=True,
    )
    safe_image(
        "erreurcumul√©.png",
        caption="error_cumulative.jpg : Erreur cumul√©e (Prophet - SARIMAX)",
        use_container_width=True,
    )
    st.markdown("""
    **Observation :**
    - L‚Äôerreur absolue reste faible la plupart du temps, avec quelques divergences ponctuelles sur les pics saisonniers.  
    - L‚Äôerreur cumul√©e reste **mod√©r√©e**, confirmant que les deux mod√®les convergent globalement.
    """)

    st.markdown("""
    **Synth√®se :**
    - Prophet journalier excelle sur les effets calendaires fins et les variations intra-semaine.
    - SARIMA reste robuste pour des pr√©visions stables √† l‚Äô√©chelle mensuelle.
    - La combinaison des deux approches offre une vision √† la fois macro (mensuelle) et micro (journali√®re) pour la planification op√©rationnelle.
    """)


# =========================================
# 6. Comparaison des mod√®les
# =========================================
elif menu == "6. Comparaison des mod√®les":
    st.title("üìä √âvaluation comparative SARIMAX vs Prophet")
    st.markdown("""
Nous comparons ici les performances des mod√®les **SARIMAX mensuel** et **Prophet journalier agr√©g√© mensuellement** sur la p√©riode **avril 2025 ‚Äì d√©cembre 2028**.
Cette √©valuation mesure la **coh√©rence** entre leurs pr√©visions mensuelles (mod√®le vs mod√®le).
""")

    # Tableau global
    df_global = pd.DataFrame({
        'Mod√®le 1 (R√©f√©rence)': ['SARIMAX mensuel'],
        'Mod√®le 2': ['Prophet agr√©g√© mensuel'],
        'MAE': [83.11],
        'RMSE': [103.67],
        'MAPE (%)': [1.40],
    })
    st.subheader("R√©sultats globaux")
    st.table(df_global)

    st.markdown("""
- La **MAE** (~83 incidents/mois) est **faible** au regard du volume total (~6000/mois).
- La **MAPE** (1.4 %) confirme une **excellente coh√©rence relative** entre les mod√®les.
""")

    # Tableau par groupe
    df_group = pd.DataFrame({
        'Groupe': ['Special Service', 'Fire', 'False Alarm'],
        'MAE SARIMAX': [697.07, 333.30, 906.34],
        'RMSE SARIMAX': [772.76, 336.14, 936.37],
        'MAE Prophet': [710.22, 345.11, 920.54],
        'RMSE Prophet': [790.30, 360.45, 950.12],
    })
    st.subheader("R√©sultats par groupe d‚Äôincidents")
    st.table(df_group)

    st.markdown("""
- Les diff√©rences de performance entre les mod√®les sont **faibles** (√©carts marginaux).
- *False Alarm* et *Special Service* sont plus **volatils**, expliquant des erreurs plus √©lev√©es.
""")

# =========================================
# 7. Conclusion & Perspectives
# =========================================
elif menu == "7. Conclusion & Perspectives":
    st.title("‚úÖ Conclusion & Perspectives")
    st.markdown("""
**Conclusion op√©rationnelle**
- **SARIMA(1,1,0)√ó(0,1,1)[12]** : parcimonieux, rapide √† entra√Æner, **excellente tenue** sur l‚Äôagr√©gat mensuel (MAPE ‚âà 1.4%).
- **Prophet journalier** : **souple** sur les effets calendaires/hebdomadaires, **r√©actif** aux pics ; agr√©g√© en mensuel pour la comparaison.
- Les deux approches convergent : **coh√©rence des tendances** et **√©carts ma√Ætris√©s** ‚Üí base fiable pour la **planification**.

**Perspectives**
- **Exog√®nes** : int√©grer m√©t√©o (temp√©rature, vent), jours f√©ri√©s/√©v√©nements majeurs, mobilit√©.
- **Granularit√©** : descendre au **borough/caserne** (mod√®les hi√©rarchiques) et **heure** (saisonnalit√© 24h).
- **SARIMAX / Prophet + Fourier** : enrichir la saisonnalit√© ; tuning via **AIC/BIC & CV temporelle**.
- **Surveillance** : suivi du **drift** + recalibrage mensuel ; alerte si **MAPE** > seuil.
- **Optimisation** : coupler pr√©visions √† un mod√®le d‚Äô**affectation** (v√©hicules/√©quipes) ‚Üí gains de d√©lai & co√ªts.
""")
